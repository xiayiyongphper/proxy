<?php
namespace service\message\common;

// @@protoc_insertion_point(namespace:.service.message.common.Header)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: common/Header.proto
 *
 * -*- magic methods -*-
 *
 * @method string getVersion()
 * @method void setVersion(\string $value)
 * @method string getRoute()
 * @method void setRoute(\string $value)
 * @method \service\message\common\EncryptionMethod getEncrypt()
 * @method void setEncrypt(\service\message\common\EncryptionMethod $value)
 * @method \service\message\common\Protocol getProtocol()
 * @method void setProtocol(\service\message\common\Protocol $value)
 * @method string getRequestId()
 * @method void setRequestId(\string $value)
 * @method string getTraceId()
 * @method void setTraceId(\string $value)
 * @method \service\message\common\SourceEnum getSource()
 * @method void setSource(\service\message\common\SourceEnum $value)
 * @method string getAppVersion()
 * @method void setAppVersion(\string $value)
 * @method string getDeviceId()
 * @method void setDeviceId(\string $value)
 * @method string getCustomerId()
 * @method void setCustomerId(\string $value)
 */
class Header extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.service.message.common.Header)
  
  /**
   * @var string $version
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $version;
  
  /**
   * @var string $route
   * @tag 2
   * @label required
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $route;
  
  /**
   * @var \service\message\common\EncryptionMethod $encrypt
   * @tag 3
   * @label required
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see \service\message\common\EncryptionMethod
   **/
  protected $encrypt;
  
  /**
   * @var \service\message\common\Protocol $protocol
   * @tag 4
   * @label required
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see \service\message\common\Protocol
   **/
  protected $protocol;
  
  /**
   * @var string $request_id
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $request_id;
  
  /**
   * @var string $trace_id
   * @tag 6
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $trace_id;
  
  /**
   * @var \service\message\common\SourceEnum $source
   * @tag 7
   * @label required
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see \service\message\common\SourceEnum
   **/
  protected $source;
  
  /**
   * @var string $app_version
   * @tag 8
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $app_version;
  
  /**
   * @var string $device_id
   * @tag 9
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $device_id;
  
  /**
   * @var string $customer_id
   * @tag 10
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $customer_id;
  
  
  // @@protoc_insertion_point(properties_scope:.service.message.common.Header)

  // @@protoc_insertion_point(class_scope:.service.message.common.Header)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "version",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => 1,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "route",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "encrypt",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => \service\message\common\EncryptionMethod::DES,
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "protocol",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => \service\message\common\Protocol::PB,
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "request_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(6, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "trace_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(7, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "source",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(8, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "app_version",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(9, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "device_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(10, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "customer_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      // @@protoc_insertion_point(builder_scope:.service.message.common.Header)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}

<?php
namespace service\message\merchant;

// @@protoc_insertion_point(namespace:.service.message.merchant.reduceQtyResponse)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: merchant/reduceQtyResponse.proto
 *
 * -*- magic methods -*-
 *
 * @method string getCode()
 * @method void setCode(\string $value)
 * @method string getMessage()
 * @method void setMessage(\string $value)
 */
class reduceQtyResponse extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.service.message.merchant.reduceQtyResponse)
  
  /**
   * @var string $code
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $code;
  
  /**
   * @var string $message
   * @tag 2
   * @label required
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $message;
  
  
  // @@protoc_insertion_point(properties_scope:.service.message.merchant.reduceQtyResponse)

  // @@protoc_insertion_point(class_scope:.service.message.merchant.reduceQtyResponse)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "code",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "message",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      // @@protoc_insertion_point(builder_scope:.service.message.merchant.reduceQtyResponse)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}

<?php
namespace service\message\contractor;

// @@protoc_insertion_point(namespace:.service.message.contractor.VisitRecord)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: contractor/VisitRecord.proto
 *
 * -*- magic methods -*-
 *
 * @method string getRecordId()
 * @method void setRecordId(\string $value)
 * @method string getContractorId()
 * @method void setContractorId(\string $value)
 * @method string getContractorName()
 * @method void setContractorName(\string $value)
 * @method string getCustomerId()
 * @method void setCustomerId(\string $value)
 * @method string getStoreName()
 * @method void setStoreName(\string $value)
 * @method string getVisitPurpose()
 * @method void setVisitPurpose(\string $value)
 * @method array getVisitPurposeOptions()
 * @method void appendVisitPurposeOptions(\service\message\common\KeyValueItem $value)
 * @method string getVisitContent()
 * @method void setVisitContent(\string $value)
 * @method string getFeedback()
 * @method void setFeedback(\string $value)
 * @method string getCreatedAt()
 * @method void setCreatedAt(\string $value)
 * @method string getVisitedAt()
 * @method void setVisitedAt(\string $value)
 * @method string getLng()
 * @method void setLng(\string $value)
 * @method string getLat()
 * @method void setLat(\string $value)
 * @method string getLocateAddress()
 * @method void setLocateAddress(\string $value)
 * @method string getIsIntended()
 * @method void setIsIntended(\string $value)
 * @method array getGallery()
 * @method void appendGallery(\service\message\common\Image $value)
 * @method bool getEditable()
 * @method void setEditable(bool $value)
 * @method \service\message\common\Image getStoreFrontImg()
 * @method void setStoreFrontImg(\service\message\common\Image $value)
 * @method array getVisitWayOptions()
 * @method void appendVisitWayOptions(\service\message\common\KeyValueItem $value)
 * @method string getVisitWay()
 * @method void setVisitWay(\string $value)
 */
class VisitRecord extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.service.message.contractor.VisitRecord)
  
  /**
   * @var string $record_id
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $record_id;
  
  /**
   * @var string $contractor_id
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $contractor_id;
  
  /**
   * @var string $contractor_name
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $contractor_name;
  
  /**
   * @var string $customer_id
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $customer_id;
  
  /**
   * @var string $store_name
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $store_name;
  
  /**
   * @var string $visit_purpose
   * @tag 6
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $visit_purpose;
  
  /**
   * @var array $visit_purpose_options
   * @tag 7
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see \service\message\common\KeyValueItem
   **/
  protected $visit_purpose_options;
  
  /**
   * @var string $visit_content
   * @tag 8
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $visit_content;
  
  /**
   * @var string $feedback
   * @tag 9
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $feedback;
  
  /**
   * @var string $created_at
   * @tag 10
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $created_at;
  
  /**
   * @var string $visited_at
   * @tag 11
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $visited_at;
  
  /**
   * @var string $lng
   * @tag 12
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $lng;
  
  /**
   * @var string $lat
   * @tag 13
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $lat;
  
  /**
   * @var string $locate_address
   * @tag 14
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $locate_address;
  
  /**
   * @var string $is_intended
   * @tag 15
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $is_intended;
  
  /**
   * @var array $gallery
   * @tag 16
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see \service\message\common\Image
   **/
  protected $gallery;
  
  /**
   * @var bool $editable
   * @tag 17
   * @label optional
   * @type \ProtocolBuffers::TYPE_BOOL
   **/
  protected $editable;
  
  /**
   * @var \service\message\common\Image $store_front_img
   * @tag 18
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $store_front_img;
  
  /**
   * @var array $visit_way_options
   * @tag 19
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see \service\message\common\KeyValueItem
   **/
  protected $visit_way_options;
  
  /**
   * @var string $visit_way
   * @tag 20
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $visit_way;
  
  
  // @@protoc_insertion_point(properties_scope:.service.message.contractor.VisitRecord)

  // @@protoc_insertion_point(class_scope:.service.message.contractor.VisitRecord)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "record_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "contractor_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "contractor_name",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "customer_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "store_name",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(6, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "visit_purpose",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(7, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "visit_purpose_options",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\KeyValueItem',
      )));
      $desc->addField(8, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "visit_content",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(9, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "feedback",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(10, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "created_at",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(11, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "visited_at",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(12, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "lng",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(13, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "lat",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(14, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "locate_address",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(15, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "is_intended",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(16, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "gallery",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\Image',
      )));
      $desc->addField(17, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_BOOL,
        "name"     => "editable",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => false,
      )));
      $desc->addField(18, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "store_front_img",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\Image',
      )));
      $desc->addField(19, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "visit_way_options",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\KeyValueItem',
      )));
      $desc->addField(20, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "visit_way",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      // @@protoc_insertion_point(builder_scope:.service.message.contractor.VisitRecord)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}

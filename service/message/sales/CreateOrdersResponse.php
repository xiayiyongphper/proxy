<?php
namespace service\message\sales;

// @@protoc_insertion_point(namespace:.service.message.sales.CreateOrdersResponse)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: sales/CreateOrdersResponse.proto
 *
 * -*- magic methods -*-
 *
 * @method string getPaymentMethod()
 * @method void setPaymentMethod(\string $value)
 * @method \service\message\common\WechatPay getWechatPay()
 * @method void setWechatPay(\service\message\common\WechatPay $value)
 * @method \service\message\common\AlipayExpress getAlipayExpress()
 * @method void setAlipayExpress(\service\message\common\AlipayExpress $value)
 * @method array getOrderId()
 * @method void appendOrderId(\string $value)
 * @method array getOrder()
 * @method void appendOrder(\service\message\common\Order $value)
 */
class CreateOrdersResponse extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.service.message.sales.CreateOrdersResponse)
  
  /**
   * @var string $payment_method
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $payment_method;
  
  /**
   * @var \service\message\common\WechatPay $wechat_pay
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $wechat_pay;
  
  /**
   * @var \service\message\common\AlipayExpress $alipay_express
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $alipay_express;
  
  /**
   * @var array $order_id
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $order_id;
  
  /**
   * @var array $order
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see \service\message\common\Order
   **/
  protected $order;
  
  
  // @@protoc_insertion_point(properties_scope:.service.message.sales.CreateOrdersResponse)

  // @@protoc_insertion_point(class_scope:.service.message.sales.CreateOrdersResponse)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "payment_method",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "wechat_pay",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\WechatPay',
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "alipay_express",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\AlipayExpress',
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "order_id",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "order",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\service\message\common\Order',
      )));
      // @@protoc_insertion_point(builder_scope:.service.message.sales.CreateOrdersResponse)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
